# Generated by Django 2.1.4 on 2019-01-02 14:24

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0010_auto_20181223_1916'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('text1', models.TextField(null=True, verbose_name='文本1')),
                ('text2', models.TextField(null=True, verbose_name='文本2')),
                ('text3', models.TextField(null=True, verbose_name='文本3')),
                ('image', models.ImageField(blank=True, null=True, upload_to='myself/%Y/%m', verbose_name='个性图片')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '个人信息',
                'verbose_name_plural': '个人信息',
                'ordering': ['-id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(blank=True, max_length=30, null=True, verbose_name='作者')),
                ('title', models.TextField(blank=True, null=True, verbose_name='标题')),
                ('content', models.TextField(blank=True, null=True, verbose_name='内容')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='添加时间')),
                ('image', models.ImageField(blank=True, null=True, upload_to='homeblogimage/%Y/%m', verbose_name='首页博客缩图')),
                ('last_updated_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='最后更新时间')),
                ('response_count', models.IntegerField(default=0, verbose_name='回复数')),
                ('click_number', models.IntegerField(default=0, verbose_name='点击数')),
                ('blog_url', models.CharField(blank=True, max_length=50, null=True, verbose_name='博客链接')),
            ],
            options={
                'verbose_name': '博客',
                'verbose_name_plural': '博客',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='BlogType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=50, verbose_name='博客类型')),
                ('image', models.ImageField(blank=True, null=True, upload_to='Blog_type/%Y/%m', verbose_name='分类插图')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户名')),
            ],
            options={
                'verbose_name': '博客类型',
                'verbose_name_plural': '博客类型',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='BolgBanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(blank=True, max_length=30, null=True, verbose_name='作者')),
                ('title', models.CharField(blank=True, max_length=100, null=True, verbose_name='标题')),
                ('image', models.ImageField(blank=True, null=True, upload_to='blog_banner/%Y/%m', verbose_name='博客轮播图')),
                ('index', models.IntegerField(default=100, verbose_name='顺序')),
                ('add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '博客轮播图',
                'verbose_name_plural': '博客轮播图',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='HomeBanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(blank=True, max_length=30, null=True, verbose_name='作者')),
                ('title', models.CharField(blank=True, max_length=100, null=True, verbose_name='标题')),
                ('image', models.ImageField(blank=True, null=True, upload_to='homebanner/%Y/%m', verbose_name='首页轮播图')),
                ('url', models.URLField(blank=True, null=True, verbose_name='访问地址')),
                ('index', models.IntegerField(default=100, verbose_name='顺序')),
                ('add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '首页轮播图',
                'verbose_name_plural': '首页轮播图',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PersonCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='卡片名字')),
                ('card_title', models.CharField(blank=True, max_length=150, null=True, verbose_name='卡片说明')),
                ('card_url', models.CharField(blank=True, max_length=150, null=True, verbose_name='卡片地址')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户名')),
            ],
            options={
                'verbose_name': '博客类型',
                'verbose_name_plural': '博客类型',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='blog',
            name='blog_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='blog.BlogType', verbose_name='博客类型'),
        ),
        migrations.AddField(
            model_name='blog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户名'),
        ),
    ]
